def split(mytuple):
    x = mytuple[0]
    y = mytuple[1]
    return x, y



class ChessBoard:
    def __init__(self):
        self.board = [[empty() for _ in range(8)] for _ in range(8)]


    def empty(self, pos: tuple):
        x, y = split(pos)
        self.board[x][y] = empty()

    def getboard(self):
        return self.board

    def change(self, pos, piece):
        x, y = split(pos)
        self.board[x][y] = piece

    def getpiece(self, pos):
        x, y = split(pos)
        return self.board[x][y]


    def all_legal(self, side: int):  # side --> 0, 1 for white and black
        legal_dict = {}
        for row in self.board:
            for piece in row:
                if piece.__class__.__name__ == "empty":
                    pass
                elif piece.getside() == side:
                    org_pos = piece.get_pos(self.board)
                    y = -1
                    for x in range(0, 8):
                        y += 1
                        pos = (x, y)
                        if piece.legal_move(pos, self):
                            if org_pos not in legal_dict.keys():
                                legal_dict[org_pos] = []
                            legal_dict[org_pos].append(pos)
        return legal_dict


class Chesspiece:
    def __init__(self, initialPos, side):  # side: 0 for white and 1 for black
        self.alive = True
        self.pos = initialPos
        self.side = side
        self.moved = False

    def OutofBoard(self, position):
        if position[0] > 7 or position[1] > 7:
            return True

    def die(self):
        self.alive = False

    def legal_move(self, destination, board):
        return True

    def move(self, destination, board):
        if self.legal_move(self, destination, board):
            original = self.pos
            if board.getpiece(destination).__class__.__name__ != "empty":
                board.getpiece(destination).die()
            piece = board.getpiece(original)
            board.change(destination, piece)
            board.empty(original)
            piece.move(destination)
            if destination[1] in [0, 7]:
                pass

    def get_pos(self, board):
        for y, row in enumerate(board):
            for x, piece in enumerate(row):
                if piece == self:
                    print(x, y)
                    return x, y




    def getside(self):
        return self.side


    def move(self, destination):
        self.moved = True
        self.pos = destination




class Pawn(Chesspiece):
    def __init__(self, Initialpos, side):
        super().__init__(Initialpos, side)

    def legal_move(self, destination, board):
        org_x, org_y = split(self.pos)
        dest_x, dest_y = split(destination)
        if not self.moved:
            moveable = [1, 2]
        else:
            moveable = [1]
        if self.side == 0:  # White
            if dest_y - org_y not in moveable:
                return False
            if dest_x != org_x:
                if abs(dest_x - org_x) != 1:
                    return False
                if board.getpiece(destination).__class__.__name__ == "empty":
                    return False
            if self.OutofBoard(destination):
                return False
            return True
        else: #  Black
            if org_y - dest_y not in moveable:
                return False
            if dest_x != org_x:
                if abs(dest_x - org_x) != 1:
                    return False
                if board.getpiece(destination).__class__.__name__ == "empty":
                    return False
            if self.OutofBoard(destination):
                return False
            return True


    def promote(self, destination, board, option):
        if option == "r":  # replace with rook
            board.empty(destination)
            pass
        elif option == "b":  # bishop
            board.empty(destination)
            pass
        elif option == "q":  # queen
            board.empty(destination)
            pass
        elif option == "k":  # knight
            board.empty(destination)
            pass


class Knight(Chesspiece):
    def __init__(self, initialPos, side):
        super().__init__(initialPos, side)

    def legal_move(self,  destination, board):
        if self.OutofBoard(destination):
            return False
        org_x , org_y = split(self.pos)
        dest_x, dest_y = split(destination)
        if (abs(org_x - dest_x) == 2) and (abs(org_y - dest_y) == 1):
            return True
        elif (abs(org_y - dest_y) == 2) and (abs(org_x - dest_x) == 1):
            return True
        else:
            return False


class Bishop(Chesspiece):
    def __init__(self, initialPos, side):
        super().__init__(initialPos, side)

    def legal_move(self, destination, board):
        if self.OutofBoard(destination):
            return False

        org_x, org_y = split(self.pos)
        dest_x, dest_y = split(destination)
        if abs(org_x - dest_x) != abs(org_y - dest_y):
            return False
        elif abs(dest_x - org_x) == 1:  # Nothing between them
            return True
        else:  # Check Nothing Between them
            x_count = org_x
            x_dir = 1
            if x_count > dest_x:
                x_dir = -1
            y_count = org_y
            y_dir = 1
            if y_count > dest_y:
                y_dir = -1
            for x in range(x_count + 1, dest_x, x_dir):
                y_count = y_count + y_dir
                if board.getpiece((x, y_count)).__class__.__name__ != "empty":
                    return False
            return True


class Rook(Chesspiece):
    def __init__(self, initialPos, side):
        super().__init__(initialPos, side)

    def legal_move(self,  destination, board):
        if self.OutofBoard(destination):
            return False
        org_x, org_y = split(self.pos)
        dest_x, dest_y = split(destination)
        if org_y == dest_y:
            if abs(org_x - dest_x) == 1:
                return True
            else:
                direction = 1
                if org_x > dest_x:
                    direction = -1
                for x in range(org_x+1, dest_x, direction):
                    if board.getpiece((x, org_y)).__class__.__name__ != "empty":
                        return False
                return True
        elif org_x == dest_x:
            if abs(org_y - dest_y) == 1:
                return True
            else:
                direction = 1
                if org_y > dest_y:
                    direction = -1
                for x in range(org_y+1, dest_y, direction):
                    if board.getpiece((x, org_y)).__class__.__name__ != "empty":
                        return False
                return True


class Queen(Chesspiece):
    def __init__(self, initialPos, side):
        super().__init__(initialPos, side)

    def legal_move(self, destination, board):
        bishop = Bishop(self.pos, self.side)
        rook = Rook(self.pos, self.side)
        if bishop.legal_move(destination, board) or rook.legal_move(destination, board):
            return True
        else:
            return False


class King(Chesspiece):
    def __init__(self, initialPos, side):
        super().__init__(initialPos, side)

    def legal_move(self, destination, board):
        original = self.pos
        if original in self.castling(board).keys():
            if self.castling(board)[original] == destination:
                return True
        if self.checked(self, destination, board):
            return False

        if self.OutofBoard(destination):
            return False
        org_x, org_y = split(original)
        dest_x, dest_y = split(destination)

        if abs(org_x - dest_x) > 1:
            return False
        if abs(org_y - dest_y) > 1:
            return False
        return True

    def checked(self, destination, board):
        if self.side == 0:
            oppo_side = 1
        elif self.side == 1:
            oppo_side = 0
        if destination in board.all_legal(oppo_side).values():
            return True
        else:
            return False


    def castling(self, board):
        org_x, org_y = split(self.pos)
        mydict = {}
        if not self.moved:
            if self.side == 0:
                check_x = 4
                check_y= 3
            else:
                check_x = 3
                check_y = 4
            mydict[(org_x, org_y)] = []
            if not board.getpiece((org_x - check_x, org_y)).moved:
                flag = True  # Assume between the pieces are empty
                for x in range(1, 4):
                    if board.getpiece((org_x - x, org_y)).__class__.__name__ != "empty":
                        flag = False
                if flag:  # No pieces between them
                    mydict[(org_x, org_y)].append((org_x - 2, org_y))
                    mydict[(org_x - 4, org_y)] = (org_x-1, org_y)
            if not board.getpiece((org_x + check_y, org_y)).moved:
                flag = True  # Assume between the pieces are empty
                for x in range(1, 3):
                    if board.getpiece((org_x + x, org_y)).__class__.__name__ != "empty":
                        flag = False
                if flag:  # No pieces between them
                    mydict[(org_x, org_y)].append((org_x + 2, org_y))
                    mydict[(org_x + 3, org_y)] = (org_x+1, org_y)


        return mydict


class empty:
    def __init__(self):
        pass
