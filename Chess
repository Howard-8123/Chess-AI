import numpy as np


class ChessBoard:
    def __init__(self):
        self.board = np.zeros((8, 8), dtype=int)

    def empty(self, pos):
        self.board[pos] = 0

    def getboard(self):
        return self.board

    def change(self, pos, piece):
        self.board[pos] = piece



class Chesspiece:
    def __init__(self, initialPos, side):  # side: 0 for white and 1 for black
        self.alive = True
        self.pos = initialPos
        self.initial = initialPos
        self.side = side

    def OutofBoard(self, position):
        if position[0] > 7 or position[1] > 7:
            return True

    def die(self):
        self.alive = False

    def legal_move(self, original, destination, board):
        return True

    def move(self, original, destination, board):
        if self.legal_move(self, original, destination, board):
            if board.getboard()[destination] != 0:
                board.getboard()[destination].die()
            board.change(destination, board.getboard()[original])
            board.empty(original)




class Pawn(Chesspiece):
    def __init__(self, Initialpos, side):
        super().__init__(Initialpos, side)

    def legal_move(self, original, destination, board):
        org_x = original[0]
        org_y = original[1]
        dest_x = destination[0]
        dest_y = destination[1]
        if original == self.initial():
            moveable = [1,2]
        else:
            moveable = [1]
        if self.side == 0: #White
            if dest_y - org_y not in moveable:
                return False
            if dest_x != org_x:
                if abs(dest_x - org_x) != 1:
                    return False
                if board.getboard()[destination] == 0:
                    return False
            return True
        else:
            if org_y - dest_y  not in moveable:
                return False
            if dest_x != org_x:
                if abs(dest_x - org_x) != 1:
                    return False
                if board.getboard()[destination] == 0:
                    return False
            return True


    def move(self, original, destination, board):
        if self.legal_move(self, original, destination, board):
            if board.getboard()[destination] != 0:
                board.getboard()[destination].die()
            board.change(destination, board.getboard()[original])
            board.empty(original)
            if destination[1] in [0, 7]:
                pass
    def promote(self, destination, board, option):
        if option == "r": # replace with rook
            board.empty(destination)
            pass
        elif option == "b": #bishop
            board.empty(destination)
            pass
        elif option == "q": #queen
            board.empty(destination)
            pass
        elif option == "k": #knight
            board.empty(destination)
            pass


class Knight(Chesspiece):
    def __init__(self, InitialPos, Side, initialPos, side):
        super().__init__(initialPos, side)
